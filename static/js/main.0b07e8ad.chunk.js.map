{"version":3,"sources":["InputManager.tsx","Vec2.ts","util.ts","Sim.ts","InputDisplay.tsx","Vec2Input.tsx","fps-timer.ts","IntegerInput.tsx","AspectRatio.tsx","SimViz.tsx","simple-sim-setup.ts","Testbed.tsx","timing.tsx","json-validation.ts","messaging.ts","time-sync.ts","Client.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["InputContext","React","createContext","buttons","setButton","InputManager","props","useState","setButtons","button","isDown","prevButtons","useEffect","listener","e","document","activeElement","nodeName","type","key","toLowerCase","window","addEventListener","removeEventListener","Provider","value","VEC2_ZERO","x","y","vec2Add","a","b","vec2Scale","v","amount","memoryConservingMap","arr","mapFn","mappedArr","changed","forEach","item","mappedItem","push","replaceArrayEntry","index","entry","length","Error","result","slice","splice","clamp","min","max","nextSimState","s","ticks","players","p","sim","velocity","next","i","position","size","nextPlayerState","time","DEFAULT_SIM_RUNNER_OPTIONS","inputTickDelay","historyLength","DEFAULT_MULTI_SIM_RUNNER_OPTIONS","networkTickDelay","MultiSimRunner","initialState","options","runners","inTransitCommands","this","SimRunner","r","filter","itc","ticksLeft","runner","playerIndex","command","queuedCommands","tick","setPlayerVelocity","executeHistoryEntry","state","commands","applySimCommand","currentState","history","startTime","getStateAtTime","apply","currentTime","entriesToDelete","now","start","getHistoryIndexForTime","nextI","past","present","future","partitionCommands","testFn","trueItems","falseItems","partitionArray","cmd","cmdsForTime","rest","partitionCommandsByTime","cmds","rollbackAndApplyCommands","addToHistory","data","InputDisplay","input","useContext","opacity","simulate","preventDefault","simulateDown","bind","simulateUp","style","cursor","onMouseDown","onMouseUp","onTouchStart","onTouchEnd","toUpperCase","buttonName","getAxis","positive","negative","useAxis","positiveBtn","negativeBtn","setValue","prevValue","ref","useRef","undefined","current","usePrevious","Vec2Input","onChange","right","left","xVel","prevXVel","down","up","yVel","prevYVel","FPSTimer","fps","callback","syncWithStartTime","idealDelta","_frame","totalDelta","timeout","isStopped","currTime","timeSinceVirtualStartTime","msSinceLastFrame","Math","abs","msToNextFrame","setTimeout","delta","clearTimeout","focusPageOnEnterOrESC","keyCode","documentElement","focus","IntegerInput","isEmpty","setIsEmpty","htmlFor","id","label","pattern","target","defaultValue","numValue","parseInt","isNaN","clampOrDefaultInt","onBlur","onKeyDown","AspectRatio","width","height","divProps","paddingTop","PlayerViz","player","className","number","title","top","SimViz","map","PLAYER_SIZE","SIM_SIZE","SIMPLE_SIM_SETUP","Testbed","playerSpeed","setPlayerSpeed","setInputTickDelay","setNetworkTickDelay","simFPS","setSimFPS","sr","sim1","setSim1","sim2","setSim2","fpsInterval","movePlayer1","useCallback","movePlayer2","nextTick","timer","performance","stop","toFixed","href","rel","getJsonProp","obj","prop","desc","Object","getOwnPropertyDescriptor","isNumberProp","isObjectProp","alwaysValid","MESSAGE_VALIDATORS","isStringProp","InvalidMessageError","parseMessage","msg","content","JSON","parse","safeParseJson","isValidMessageType","isValidMessage","ServerTimeSynchronizer","bestRTT","Infinity","bestServerTime","bestClientTime","_updates","roundTripTime","serverTime","timePassed","PING_INTERVAL_MS","ClientState","NUM_TIME_SYNC_PINGS","BrowserClient","room","url","process","REACT_APP_SERVER_URL","protocol","location","port","hostname","getServerURL","ws","pingTimeout","pingStart","syncingTime","timeSync","simRunner","fpsTimer","onSim","onOpen","onClose","onPing","ping","sendMessage","handleOpen","handleMessage","ev","update","updates","initialized","deserialize","handleTick","fromServerTime","timeOrigin","console","log","close","handleClose","shutdown","WebSocket","onopen","onmessage","onclose","message","send","stringify","readyState","OPEN","Client","connState","setConnState","setPing","setSim","activeClient","client","ms","movePlayer","App","search","URLSearchParams","get","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","userAgent","classList","add"],"mappings":"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","file":"static/js/main.0b07e8ad.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst USE_CAPTURE = true;\n\nexport type Button = 'w'|'a'|'s'|'d'|'arrowup'|'arrowdown'|'arrowleft'|'arrowright';\n\nexport type ButtonState = {\n  [K in Button]?: boolean\n};\n\ntype ButtonSetter = (button: Button, isDown: boolean) => void;\n\nexport type InputContextType = {\n  buttons: ButtonState,\n  setButton: ButtonSetter,\n};\n\nexport const InputContext = React.createContext<InputContextType>({\n  buttons: {},\n  setButton: () => {},\n});\n\nexport const InputManager: React.FC = props => {\n  const [buttons, setButtons] = useState<ButtonState>({});\n\n  const setButton: ButtonSetter = (button, isDown) => {\n    setButtons(prevButtons => ({\n      ...prevButtons,\n      [button]: isDown\n    }));\n  };\n\n  useEffect(() => {\n    const listener = (e: KeyboardEvent) => {\n      if (document.activeElement && document.activeElement.nodeName === 'INPUT') return;\n\n      const isDown = e.type === 'keydown';\n\n      setButton(e.key.toLowerCase() as Button, isDown);\n    };\n\n    window.addEventListener('keydown', listener, USE_CAPTURE);\n    window.addEventListener('keyup', listener, USE_CAPTURE);\n\n    return () => {\n      window.removeEventListener('keydown', listener, USE_CAPTURE);\n      window.removeEventListener('keyup', listener, USE_CAPTURE);\n    };\n  }, []);\n\n  return <InputContext.Provider value={{buttons, setButton}} {...props} />;\n};\n\nexport function buttonName(button: Button): string {\n  switch (button) {\n    case 'arrowup': return '↑';\n    case 'arrowdown': return '↓';\n    case 'arrowleft': return '←';\n    case 'arrowright': return '→';\n  }\n\n  return button.toUpperCase();\n}\n","export const VEC2_ZERO: Vec2 = { x: 0, y: 0 };\n\nexport interface Vec2 {\n  x: number;\n  y: number;\n}\n\nexport function vec2Equals(a: Vec2, b: Vec2): boolean {\n  return a.x === b.x && a.y === b.y;\n}\n\nexport function vec2Add(a: Vec2, b: Vec2): Vec2 {\n  return { x: a.x + b.x, y: a.y + b.y };\n}\n\nexport function vec2Subtract(a: Vec2, b: Vec2): Vec2 {\n  return vec2Add(a, vec2Scale(b, -1));\n}\n\nexport function vec2Scale(v: Vec2, amount: number): Vec2 {\n  return { x: amount * v.x, y: amount * v.y };\n}\n","export function memoryConservingMap<T>(arr: T[], mapFn: (item: T) => T): T[] {\n  const mappedArr: T[] = [];\n  let changed = false;\n\n  arr.forEach(item => {\n    const mappedItem = mapFn(item);\n    if (mappedItem !== item && !changed) {\n      changed = true;\n    }\n    mappedArr.push(mappedItem)\n  });\n\n  return changed ? mappedArr : arr;\n}\n\nexport function replaceArrayEntry<T>(arr: T[], index: number, entry: T): T[] {\n  if (index < 0 || index >= arr.length) {\n    throw new Error(`Array index ${index} is out of bounds`);\n  }\n  const result = arr.slice();\n  result.splice(index, 1, entry);\n  return result;\n}\n\n/**\n * A type that can be loslessly serialized to/from JSON.\n *\n * Ugh, the last part of this used to be `{[key: string]: Jsonable}` but this\n * doesn't work because TS will complain that an object which is actually\n * JSON-serializable has no index signature, so I changed the last part to\n * `object` which sort of defeats the purpose of this type, but whatever.\n *\n * More details here: https://github.com/microsoft/TypeScript/issues/1897\n */\nexport type Jsonable = string|number|boolean|null|Jsonable[]|object;\n\nexport function clone<T extends Jsonable>(obj: T): T {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nexport function clamp(value: number, min: number, max: number): number {\n  if (value < min) {\n    return min;\n  }\n  if (value > max) {\n    return max;\n  }\n  return value;\n}\n\nexport function partitionArray<T>(arr: T[], testFn: (item: T) => boolean): [T[], T[]] {\n  const trueItems: T[] = [];\n  const falseItems: T[] = [];\n\n  arr.forEach(item => {\n    if (testFn(item)) {\n      trueItems.push(item);\n    } else {\n      falseItems.push(item);\n    }\n  });\n\n  return [trueItems, falseItems];\n}\n","import { Vec2, vec2Equals, VEC2_ZERO, vec2Add } from './Vec2';\nimport { memoryConservingMap, replaceArrayEntry, clamp, partitionArray } from './util';\n\nexport type SetPlayerVelocityCommand = {\n  type: 'set-velocity';\n  time: number;\n  playerIndex: number;\n  velocity: Vec2;\n};\n\nexport type SimCommand = SetPlayerVelocityCommand;\n\nexport interface Player {\n  number: number;\n  position: Vec2;\n  velocity: Vec2;\n  size: Vec2;\n}\n\nexport interface Sim {\n  players: Player[];\n  size: Vec2;\n  time: number;\n}\n\nexport function nextPlayerState(p: Player, sim: Sim, ticks: number): Player {\n  if (vec2Equals(p.velocity, VEC2_ZERO)) {\n    return p;\n  }\n  const next: Player = {...p};\n  for (let i = 0; i < ticks; i++) {\n    next.position = vec2Add(next.position, p.velocity);\n  }\n  next.position.x = clamp(next.position.x, 0, sim.size.x - p.size.x);\n  next.position.y = clamp(next.position.y, 0, sim.size.y - p.size.y);\n  return next;\n}\n\nexport function nextSimState(s: Sim, ticks: number = 1): Sim {\n  return {\n    ...s,\n    players: memoryConservingMap(s.players, p => nextPlayerState(p, s, ticks)),\n    time: s.time + ticks\n  };\n}\n\nexport function applySimCommand(s: Sim, command: SimCommand): Sim {\n  if (command.time !== s.time) {\n    throw new Error(`We can only apply commands made at the same time as the sim right now`);\n  }\n  switch (command.type) {\n    case 'set-velocity':\n      return {\n        ...s,\n        players: replaceArrayEntry(s.players, command.playerIndex, {\n          ...s.players[command.playerIndex],\n          velocity: command.velocity\n        })\n      };\n  }\n}\n\nexport type SimRunnerOptions = {\n  inputTickDelay: number,\n  historyLength: number,\n};\n\nconst DEFAULT_SIM_RUNNER_OPTIONS: SimRunnerOptions = {\n  inputTickDelay: 0,\n  historyLength: 1000\n};\n\nexport type MultiSimRunnerOptions = SimRunnerOptions & {\n  networkTickDelay: number\n};\n\nconst DEFAULT_MULTI_SIM_RUNNER_OPTIONS: MultiSimRunnerOptions = {\n  ...DEFAULT_SIM_RUNNER_OPTIONS,\n  networkTickDelay: 1\n};\n\nexport class MultiSimRunner {\n  runners: SimRunner[] = [];\n  options: MultiSimRunnerOptions;\n  inTransitCommands: {ticksLeft: number, command: SimCommand}[] = [];\n\n  constructor(initialState: Sim, options?: Partial<MultiSimRunnerOptions>) {\n    this.options = {\n      ...DEFAULT_MULTI_SIM_RUNNER_OPTIONS,\n      ...options\n    };\n    for (let i = 0; i < initialState.players.length; i++) {\n      this.runners.push(new SimRunner(initialState, options));\n    }\n  }\n\n  setInputTickDelay(value: number) {\n    this.runners.forEach(r => { r.options.inputTickDelay = value; });\n  }\n\n  setNetworkTickDelay(value: number) {\n    this.options.networkTickDelay = value;\n  }\n\n  tick() {\n    this.inTransitCommands = this.inTransitCommands.filter(itc => {\n      if (itc.ticksLeft === 0) {\n        this.runners.forEach((runner, playerIndex) => {\n          if (playerIndex !== itc.command.playerIndex) {\n            runner.queuedCommands.push(itc.command);\n          }\n        });\n        return false;\n      }\n      itc.ticksLeft--;\n      return true;\n    });\n    this.runners.forEach(r => r.tick());\n  }\n\n  setPlayerVelocity(playerIndex: number, velocity: Vec2) {\n    const command = this.runners[playerIndex].setPlayerVelocity(playerIndex, velocity);\n    this.inTransitCommands.push({ticksLeft: this.options.networkTickDelay, command});\n  }\n}\n\nfunction partitionCommands(commands: SimCommand[], time: number): [SimCommand[], SimCommand[], SimCommand[]] {\n  const past: SimCommand[] = [];\n  const present: SimCommand[] = [];\n  const future: SimCommand[] = [];\n\n  commands.forEach(command => {\n    if (command.time < time) {\n      past.push(command);\n    } else if (command.time > time) {\n      future.push(command);\n    } else {\n      present.push(command);\n    }\n  });\n\n  return [past, present, future];\n}\n\nfunction executeHistoryEntry({state, commands}: SimHistoryEntry): Sim {\n  commands.forEach(command => { state = applySimCommand(state, command); });\n  state = nextSimState(state, 1);\n  return state;\n}\n\nfunction partitionCommandsByTime(commands: SimCommand[]): SimCommand[][] {\n  const result: SimCommand[][] = [];\n\n  while (commands.length > 0) {\n    const time = commands[0].time;\n    const [cmdsForTime, rest] = partitionArray(commands, cmd => cmd.time === time);\n    result.push(cmdsForTime);\n    commands = rest;\n  }\n\n  return result;\n}\n\ntype SimHistoryEntry = {\n  state: Sim;\n  commands: SimCommand[]\n};\n\nexport type SerializedSimRunner = {\n  initialState: Sim,\n  commands: SimCommand[],\n  currentTime: number,\n  options: SimRunnerOptions,\n}\n\nexport class SimRunner {\n  currentState: Sim;\n  history: SimHistoryEntry[] = [];\n  options: SimRunnerOptions;\n  queuedCommands: SimCommand[] = [];\n\n  constructor(readonly initialState: Sim, options?: Partial<SimRunnerOptions>) {\n    this.options = {\n      ...DEFAULT_SIM_RUNNER_OPTIONS,\n      ...options\n    };\n    this.currentState = initialState;\n  }\n\n  static deserialize(data: SerializedSimRunner): SimRunner {\n    const runner = new SimRunner(data.initialState, data.options);\n    runner.queuedCommands.push.apply(runner.queuedCommands, data.commands);\n    if (data.currentTime < runner.currentState.time) {\n      throw new Error(`Current time is before initial state time!`);\n    }\n    while (runner.currentState.time !== data.currentTime) {\n      runner.tick();\n    }\n    return runner;\n  }\n\n  serialize(): SerializedSimRunner {\n    const startTime = this.currentState.time - this.history.length;\n    const initialState = this.getStateAtTime(startTime);\n    const commands: SimCommand[] = [];\n    for (let i = 0; i < this.history.length; i++) {\n      commands.push.apply(commands, this.history[i].commands);\n    }\n    commands.push.apply(commands, this.queuedCommands);\n    return {\n      initialState,\n      commands,\n      currentTime: this.currentState.time,\n      options: this.options,\n    };\n  }\n\n  private addToHistory(entry: SimHistoryEntry): SimHistoryEntry {\n    this.history.push(entry);\n    const entriesToDelete = this.history.length - this.options.historyLength;\n    if (entriesToDelete > 0) {\n      this.history.splice(0, entriesToDelete);\n    }\n    return entry;\n  }\n\n  private getHistoryIndexForTime(time: number) {\n    const now = this.currentState.time;\n    const index = this.history.length - (now - time);\n    if (index < 0) {\n      throw new Error(`History is not long enough for time ${time}!`);\n    }\n    if (index >= this.history.length) {\n      throw new Error(`Time ${time} is in the present or future, not the past!`);\n    }\n    return index;\n  }\n\n  private rollbackAndApplyCommands(commands: SimCommand[]) {\n    const time = commands[0].time;\n    const start = this.getHistoryIndexForTime(time);\n    this.history[start].commands.push(...commands);\n    for (let i = start; i < this.history.length; i++) {\n      const state = executeHistoryEntry(this.history[i]);\n      const nextI = i + 1;\n      if (nextI < this.history.length) {\n        this.history[nextI].state = state;\n      } else {\n        this.currentState = state;\n      }\n    }\n  }\n\n  getStateAtTime(time: number): Sim {\n    if (time === this.currentState.time) return this.currentState;\n    return this.history[this.getHistoryIndexForTime(time)].state;\n  }\n\n  tick() {\n    const [past, present, future] = partitionCommands(this.queuedCommands, this.currentState.time);\n    this.queuedCommands = future;\n    partitionCommandsByTime(past).forEach(cmds => this.rollbackAndApplyCommands(cmds));\n    this.currentState = executeHistoryEntry(this.addToHistory({\n      state: this.currentState,\n      commands: present\n    }));\n  }\n\n  setPlayerVelocity(playerIndex: number, velocity: Vec2): SimCommand {\n    const cmd: SimCommand = {\n      type: 'set-velocity',\n      time: this.currentState.time + this.options.inputTickDelay,\n      playerIndex,\n      velocity\n    };\n    this.queuedCommands.push(cmd);\n    return cmd;\n  }\n}\n","import React, { useContext } from 'react';\nimport { Button, InputContext, buttonName } from './InputManager';\n\nexport const InputDisplay: React.FC<{\n  button: Button;\n}> = ({ button }) => {\n  const input = useContext(InputContext);\n  const isDown = input.buttons[button];\n  const opacity = isDown ? 1.0 : 0.66;\n  const simulate = (isDown: boolean, e: React.SyntheticEvent) => {\n    e.preventDefault();\n    input.setButton(button, isDown);\n  };\n  const simulateDown = simulate.bind(null, true);\n  const simulateUp = simulate.bind(null, false);\n  return (\n    <kbd\n      style={{ opacity, cursor: 'pointer' }}\n      onMouseDown={simulateDown}\n      onMouseUp={simulateUp}\n      onTouchStart={simulateDown}\n      onTouchEnd={simulateUp}\n    >\n      {buttonName(button)}\n    </kbd>\n  );\n};\n","import React, { useContext, useEffect, useState, useRef } from 'react';\nimport { Button, InputContext } from './InputManager';\nimport { Vec2 } from './Vec2';\nimport { InputDisplay } from './InputDisplay';\n\nfunction getAxis(positive: boolean, negative: boolean): number {\n  if (positive && negative) return 0;\n  if (!positive && !negative) return 0;\n  if (positive) return 1.0;\n  return -1.0;\n}\n\n// https://stackoverflow.com/a/53446665\nfunction usePrevious<T>(value: T): T|undefined {\n  const ref = useRef<T|undefined>(undefined);\n\n  useEffect(() => {\n    ref.current = value;\n  });\n\n  return ref.current;\n}\n\nfunction useAxis(positiveBtn: Button, negativeBtn: Button): [number, number|undefined] {\n  const {[positiveBtn]: positive, [negativeBtn]: negative} = useContext(InputContext).buttons;\n  const [value, setValue] = useState(getAxis(!!positive, !!negative));\n  const prevValue = usePrevious(value);\n\n  useEffect(() => setValue(getAxis(!!positive, !!negative)), [positive, negative]);\n\n  return [value, prevValue];\n}\n\nexport const Vec2Input: React.FC<{\n  up: Button,\n  down: Button,\n  left: Button,\n  right: Button,\n  onChange: (velocity: Vec2) => void\n}> = (props) => {\n  const { onChange } = props;\n  const [xVel, prevXVel] = useAxis(props.right, props.left);\n  const [yVel, prevYVel] = useAxis(props.down, props.up);\n\n  useEffect(() => {\n    if (yVel !== prevYVel || xVel !== prevXVel) {\n      onChange({x: xVel, y: yVel});\n    }\n  }, [xVel, prevXVel, yVel, prevYVel, onChange]);\n\n  return (\n    <div>\n      <div><InputDisplay button={props.up} /></div>\n      <div>\n        <InputDisplay button={props.left} />\n        <InputDisplay button={props.down} />\n        <InputDisplay button={props.right} />\n      </div>\n    </div>\n  );\n};\n","export class FPSTimer {\n  private readonly idealDelta: number;\n  private _frame: number;\n  private totalDelta: number;\n  private start: number;\n  private timeout: any;\n  private isStopped = false;\n\n  constructor(\n    readonly fps: number,\n    readonly callback: () => void,\n    readonly now: () => number,\n    readonly syncWithStartTime?: number,\n  ) {\n    const currTime = now();\n    const virtualStartTime = syncWithStartTime ?? currTime;\n    const timeSinceVirtualStartTime = currTime - virtualStartTime;\n\n    this.idealDelta = 1000 / fps;\n\n    const msSinceLastFrame = Math.abs(timeSinceVirtualStartTime % this.idealDelta);\n    const msToNextFrame = this.idealDelta - msSinceLastFrame;\n\n    this.start = currTime - msSinceLastFrame;\n    this._frame = 0;\n    this.totalDelta = 0;\n    this.next = this.next.bind(this);\n    this.timeout = setTimeout(this.next, msToNextFrame);\n  }\n\n  private next() {\n    this._frame++;\n    this.callback();\n    if (this.isStopped) {\n      // The callback stopped us, so don't schedule another timeout.\n      return;\n    }\n    const now = this.now();\n    const idealNow = this.start + this._frame * this.idealDelta;\n    const delta = now - idealNow;\n    this.totalDelta += Math.abs(delta);\n    this.timeout = setTimeout(this.next, Math.max(this.idealDelta - delta, 0));\n    // if (this._frame % this.fps === 0) console.log(this._frame, Math.floor(now), this.averageDelta);\n  }\n\n  get frame() {\n    return this._frame;\n  }\n\n  get averageDelta() {\n    return this.totalDelta / this._frame;\n  }\n\n  stop() {\n    clearTimeout(this.timeout);\n    this.isStopped = true;\n  }\n}\n","import React, { useState } from 'react';\nimport { clamp } from './util';\n\nfunction clampOrDefaultInt(value: string, min: number, max: number, defaultValue: number): number {\n  const numValue = parseInt(value);\n  if (isNaN(numValue)) {\n    return defaultValue;\n  }\n  return clamp(numValue, min, max);\n}\n\nfunction focusPageOnEnterOrESC(e: React.KeyboardEvent) {\n  if (e.keyCode === 13 || e.keyCode === 27) {\n    e.preventDefault();\n    document.documentElement.focus();\n  }\n}\n\nexport const IntegerInput: React.FC<{\n  id: string,\n  label: string,\n  value: number,\n  onChange: (value: number) => void,\n  min: number,\n  max: number\n}> = (props) => {\n  const [isEmpty, setIsEmpty] = useState(false);\n\n  return <>\n    <label htmlFor={props.id}>{props.label}:</label>{' '}\n    <input\n      type=\"number\"\n      pattern=\"\\d*\" /* Enable keypad on iOS. */\n      value={isEmpty ? '' : props.value}\n      min={props.min}\n      max={props.max}\n      onChange={(e) => {\n        const { value } = e.target;\n        if (value) {\n          setIsEmpty(false);\n          props.onChange(clampOrDefaultInt(e.target.value, props.min, props.max, props.value));\n        } else {\n          setIsEmpty(true);\n        }\n      }}\n      onBlur={() => {\n        if (isEmpty) {\n          setIsEmpty(false);\n        }\n      }}\n      onKeyDown={focusPageOnEnterOrESC}\n    />\n  </>\n};\n","import React from 'react';\n\nexport const AspectRatio: React.FC<{\n  width: number,\n  height: number,\n} & React.HTMLAttributes<HTMLDivElement>> = props => {\n  const {width, height, style, ...divProps} = props;\n\n  return <div style={{\n    ...style,\n    height: 0,\n    paddingTop: `${height / width * 100}%`\n  }} {...divProps}/>;\n};\n","import React from 'react';\nimport { AspectRatio } from './AspectRatio';\nimport './Sim.css';\nimport { Player, Sim } from './Sim';\n\nexport const PlayerViz: React.FC<{player: Player, sim: Sim}> = ({player, sim}) => {\n  return (\n    <div className={`Player-viz Player-number-${player.number}`} title={`Player ${player.number}`} style={{\n      width: `${player.size.x / sim.size.x * 100}%`,\n      top: `${player.position.y / sim.size.y * 100}%`,\n      left: `${player.position.x / sim.size.x * 100}%`,\n    }}>\n      <AspectRatio width={player.size.x} height={player.size.y} />\n    </div>\n  );\n};\n\nexport const SimViz: React.FC<{sim: Sim}> = ({sim}) => {\n  return (\n    <AspectRatio className=\"Sim-viz\" width={sim.size.x} height={sim.size.y}>\n      {sim.players.map(player => <PlayerViz key={player.number} player={player} sim={sim} />)}\n    </AspectRatio>\n  );\n};\n","import { Vec2, vec2Subtract, VEC2_ZERO } from \"./Vec2\";\nimport { Player, Sim } from \"./Sim\";\n\nconst PLAYER_SIZE: Vec2 = {x: 5, y: 5};\nconst SIM_SIZE: Vec2 = {x: 100, y: 100};\n\nconst INITIAL_P1: Player = {\n  number: 1,\n  position: VEC2_ZERO,\n  velocity: VEC2_ZERO,\n  size: PLAYER_SIZE,\n};\n\nconst INITIAL_P2: Player = {\n  number: 2,\n  position: vec2Subtract(SIM_SIZE, PLAYER_SIZE),\n  velocity: VEC2_ZERO,\n  size: PLAYER_SIZE,\n};\n\nexport const SIMPLE_SIM_SETUP: Sim = {\n  players: [INITIAL_P1, INITIAL_P2],\n  size: SIM_SIZE,\n  time: 0\n};\n","import React, { useRef, useCallback, useState, useEffect } from 'react';\nimport './Testbed.css';\nimport { MultiSimRunner } from './Sim';\nimport { Vec2, vec2Scale } from \"./Vec2\";\nimport { Vec2Input } from './Vec2Input';\nimport { useFPS } from './timing';\nimport { IntegerInput } from './IntegerInput';\nimport { SimViz } from './SimViz';\nimport { SIMPLE_SIM_SETUP } from './simple-sim-setup';\n\nconst MIN_FPS = 1;\nconst MAX_FPS = 60;\nconst MIN_SPEED = 1;\nconst MAX_SPEED = 100;\nconst SPEED_SCALE = 0.1;\n\nconst Testbed: React.FC = () => {\n  const [playerSpeed, setPlayerSpeed] = useState(10);\n  const [inputTickDelay, setInputTickDelay] = useState(3);\n  const [networkTickDelay, setNetworkTickDelay] = useState(6);\n  const [simFPS, setSimFPS] = useState(MAX_FPS);\n  const sr = useRef(new MultiSimRunner(SIMPLE_SIM_SETUP, {inputTickDelay, networkTickDelay})).current;\n  const [sim1, setSim1] = useState(sr.runners[0].currentState);\n  const [sim2, setSim2] = useState(sr.runners[1].currentState);\n  const fpsInterval = 1000 / simFPS;\n\n  const movePlayer1 = useCallback((v: Vec2) => sr.setPlayerVelocity(0, vec2Scale(v, SPEED_SCALE * playerSpeed)), [sr, playerSpeed]);\n  const movePlayer2 = useCallback((v: Vec2) => sr.setPlayerVelocity(1, vec2Scale(v, SPEED_SCALE * playerSpeed)), [sr, playerSpeed]);\n  const nextTick = useCallback(() => {\n    sr.tick();\n    setSim1(sr.runners[0].currentState);\n    setSim2(sr.runners[1].currentState);\n  }, [sr]);\n\n  useEffect(() => sr.setInputTickDelay(inputTickDelay), [inputTickDelay, sr]);\n  useEffect(() => sr.setNetworkTickDelay(networkTickDelay), [networkTickDelay, sr]);\n  useFPS(nextTick, simFPS);\n\n  return (\n    <div className=\"Testbed-viewports\">\n      <div className=\"Testbed-player-1\">\n        <h2>Player 1</h2>\n        <SimViz sim={sim1} />\n        <Vec2Input up=\"w\" down=\"s\" left=\"a\" right=\"d\" onChange={movePlayer1} />\n      </div>\n      <div className=\"Testbed-config\">\n        <h2>Configuration</h2>\n        <p>\n          <IntegerInput id=\"fps\" label=\"Simulation FPS\" min={MIN_FPS} max={MAX_FPS} value={simFPS} onChange={setSimFPS} />\n          <span className=\"desc\">{fpsInterval.toFixed(0)}ms between frames</span>\n        </p>\n        <p>\n          <IntegerInput id=\"itd\" label=\"Input frame delay\" min={0} max={100} value={inputTickDelay} onChange={setInputTickDelay} />\n          <span className=\"desc\">{(fpsInterval * inputTickDelay).toFixed(0)}ms before input affects simulation</span>\n        </p>\n        <p>\n          <IntegerInput id=\"ntd\" label=\"Network frame delay\" min={0} max={100} value={networkTickDelay} onChange={setNetworkTickDelay} />\n          <span className=\"desc\">{(fpsInterval * networkTickDelay).toFixed(0)}ms of simulated network lag</span>\n        </p>\n        <p>\n          <IntegerInput id=\"speed\" label=\"Player speed\" min={MIN_SPEED} max={MAX_SPEED} value={playerSpeed} onChange={setPlayerSpeed} />\n        </p>\n        <p className=\"desc\">\n          This is an exploration of delay and rollback-based netcode in a simulated network environment. For more details, please see the <a href=\"https://github.com/toolness/netcode-fun#readme\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub README</a>.\n        </p>\n      </div>\n      <div className=\"Testbed-player-2\">\n        <h2>Player 2</h2>\n        <SimViz sim={sim2} />\n        <Vec2Input up=\"arrowup\" down=\"arrowdown\" left=\"arrowleft\" right=\"arrowright\" onChange={movePlayer2} />\n      </div>\n    </div>\n  );\n}\n\nexport default Testbed;\n","import { useEffect, useRef } from 'react';\nimport { FPSTimer } from './fps-timer';\n\nexport function useRequestAnimationFrame(fn: () => void) {\n  const animRef = useRef(-1);\n  useEffect(() => {\n    const animate = () => {\n      fn();\n      animRef.current = requestAnimationFrame(animate);\n    };\n    animRef.current = requestAnimationFrame(animate);\n    return () => {\n      cancelAnimationFrame(animRef.current);\n    };\n  }, [fn]);\n}\n\nexport function useInterval(fn: () => void, ms: number) {\n  const intervalRef = useRef(-1);\n\n  useEffect(() => {\n    intervalRef.current = window.setInterval(fn, ms);\n    return () => {\n      window.clearInterval(intervalRef.current);\n    };\n  }, [fn, ms]);\n}\n\nexport function useFPS(callback: () => void, fps: number) {\n  useEffect(() => {\n    const timer = new FPSTimer(\n      fps,\n      callback,\n      () => performance.now()\n    );\n\n    return () => timer.stop();\n  }, [fps, callback]);\n}\n","import { Jsonable } from \"./util\";\n\nexport function safeParseJson(content: string): Jsonable|undefined {\n  try {\n    return JSON.parse(content);\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport function getJsonProp(obj: Jsonable, prop: string): Jsonable|undefined {\n  if (obj === undefined || obj === null) return undefined;\n  const desc = Object.getOwnPropertyDescriptor(obj, prop);\n  if (!desc) return undefined;\n  return desc.value;\n}\n\nexport function isStringProp(obj: Jsonable, prop: string): boolean {\n  return typeof(getJsonProp(obj, prop)) === 'string';\n}\n\nexport function isNumberProp(obj: Jsonable, prop: string): boolean {\n  return typeof(getJsonProp(obj, prop)) === 'number';\n}\n\nexport function isObjectProp(obj: Jsonable, prop: string): boolean {\n  return typeof(getJsonProp(obj, prop)) === 'object';\n}\n","import { safeParseJson, isStringProp, isNumberProp, getJsonProp, isObjectProp } from \"./json-validation\";\nimport { Jsonable } from \"./util\";\nimport { SerializedSimRunner, SimCommand } from \"./Sim\";\n\nexport type Message =\n  | { type: 'join-room', room: string, playerIndex: number }\n  | { type: 'room-joined', timeOrigin: number, fps: number, simRunner: SerializedSimRunner }\n  | { type: 'room-left' }\n  | { type: 'sim-command', command: SimCommand }\n  | { type: 'ping' }\n  | { type: 'pong', now: number };\n\ntype MessageValidatorMap = {\n  [K in Message[\"type\"]]: (obj: Jsonable) => boolean\n};\n\nconst alwaysValid = () => true;\n\nconst MESSAGE_VALIDATORS: MessageValidatorMap = {\n  'join-room': obj => isStringProp(obj, 'room') && isNumberProp(obj, 'playerIndex'),\n  'ping': alwaysValid,\n  'pong': obj => isNumberProp(obj, 'now'),\n  'room-joined': obj => isNumberProp(obj, 'timeOrigin') && isObjectProp(obj, 'simRunner'),\n  'room-left': alwaysValid,\n  'sim-command': obj => isObjectProp(obj, 'command'),\n};\n\nfunction isValidMessageType(type: string): type is Message[\"type\"] {\n  return type in MESSAGE_VALIDATORS;\n}\n\nfunction isValidMessage(obj: Jsonable, type: Message[\"type\"]): obj is Message {\n  return MESSAGE_VALIDATORS[type](obj);\n}\n\nexport class InvalidMessageError extends Error {\n}\n\nexport function parseMessage(data: unknown): Message {\n  if (typeof(data) !== 'string') {\n    throw new InvalidMessageError(`Expected string message but got ${typeof(data)}`);\n  }\n\n  const msg = safeParseJson(data);\n\n  if (msg === undefined) {\n    throw new InvalidMessageError(`Message is not JSON: ${data}`);\n  }\n\n  const type = getJsonProp(msg, 'type');\n\n  if (typeof(type) !== 'string' || !isValidMessageType(type)) {\n    throw new InvalidMessageError(`Invalid message type: ${data}`);\n  }\n\n  if (!isValidMessage(msg, type)) {\n    throw new InvalidMessageError(`Message of type \"${type}\" is invalid`);\n  }\n\n  return msg;\n}\n\nexport function serializeMessage(message: Message): string {\n  return JSON.stringify(message);\n}\n","/**\n * A class for synchronizing time with the server, based on\n * Cristian's algorithm: https://en.wikipedia.org/wiki/Cristian%27s_algorithm\n */\nexport class ServerTimeSynchronizer {\n  private bestRTT: number = Infinity;\n  private bestServerTime: number;\n  private bestClientTime: number;\n  private _updates: number = 0;\n\n  constructor(readonly now: () => number = () => performance.now()) {\n    this.bestServerTime = now();\n    this.bestClientTime = now();\n  }\n\n  get updates() {\n    return this._updates;\n  }\n\n  update(roundTripTime: number, serverTime: number) {\n    this._updates += 1;\n    if (roundTripTime < this.bestRTT) {\n      this.bestRTT = roundTripTime;\n      this.bestServerTime = serverTime + roundTripTime / 2;\n      this.bestClientTime = this.now();\n    }\n  }\n\n  serverNow() {\n    const timePassed = this.now() - this.bestClientTime;\n    return this.bestServerTime + timePassed;\n  }\n\n  fromServerTime(serverTime: number) {\n    return serverTime + (this.bestClientTime - this.bestServerTime);\n  }\n}\n","import React, { useState, useRef, useCallback } from 'react';\nimport { Message, serializeMessage, parseMessage } from './messaging';\nimport { useEffect } from 'react';\nimport { ServerTimeSynchronizer } from './time-sync';\nimport { SimRunner, Sim } from './Sim';\nimport { FPSTimer } from './fps-timer';\nimport { SimViz } from './SimViz';\nimport \"./Client.css\";\nimport { Vec2 } from './Vec2';\nimport { Vec2Input } from './Vec2Input';\n\nconst PING_INTERVAL_MS = 1000;\n\nfunction getServerURL(): string {\n  const url = process.env.REACT_APP_SERVER_URL;\n  if (url) {\n    return url;\n  }\n  const protocol = window.location.protocol === 'http:' ? 'ws:' : 'wss:';\n  const port = parseInt(window.location.port) + 1;\n  if (isNaN(port)) {\n    throw new Error('Please define the environment variable REACT_APP_SERVER_URL!');\n  }\n  return `${protocol}//${window.location.hostname}:${port}/`;\n}\n\nconst NUM_TIME_SYNC_PINGS = 3;\n\nenum ClientState {\n  syncingTime,\n  initialized\n}\n\nclass BrowserClient {\n  private readonly ws: WebSocket;\n  private pingTimeout: number|null = null;\n  private pingStart: number = 0;\n  private roundTripTime: number|null = null;\n  private state = ClientState.syncingTime;\n  private timeSync = new ServerTimeSynchronizer();\n  private simRunner: SimRunner|null = null;\n  private fpsTimer: FPSTimer|null = null;\n  onSim?: (sim: Sim) => void;\n  onOpen?: () => void;\n  onClose?: () => void;\n  onPing?: (ms: number) => void;\n\n  constructor(readonly room: string, readonly playerIndex: number, readonly url = getServerURL()) {\n    this.ws = new WebSocket(url);\n    this.ws.onopen = this.handleOpen;\n    this.ws.onmessage = this.handleMessage;\n    this.ws.onclose = this.handleClose;\n  }\n\n  private get isConnected(): boolean {\n    return this.ws.readyState === WebSocket.OPEN;\n  }\n\n  private ping = () => {\n    this.pingStart = performance.now();\n    this.sendMessage({type: 'ping'});\n  };\n\n  private handleOpen = () => {\n    this.ping();\n    this.onOpen && this.onOpen();\n  };\n\n  private sendMessage(msg: Message) {\n    this.ws.send(serializeMessage(msg));\n  }\n\n  private handleTick() {\n    if (this.simRunner) {\n      this.simRunner.tick();\n      if (this.onSim) {\n        this.onSim(this.simRunner.currentState);\n      }\n    }\n  }\n\n  movePlayer(v: Vec2) {\n    if (this.simRunner) {\n      const command = this.simRunner.setPlayerVelocity(this.playerIndex, v);\n      this.sendMessage({type: 'sim-command', command});\n    }\n  }\n\n  private handleMessage = (ev: MessageEvent) => {\n    const msg: Message = parseMessage(ev.data);\n\n    switch (msg.type) {\n      case 'pong':\n      this.roundTripTime = performance.now() - this.pingStart;\n      if (this.state === ClientState.syncingTime) {\n        this.timeSync.update(this.roundTripTime, msg.now);\n        this.ping();\n        if (this.timeSync.updates >= NUM_TIME_SYNC_PINGS) {\n          this.state = ClientState.initialized;\n          this.sendMessage({\n            type: 'join-room',\n            room: this.room,\n            playerIndex: this.playerIndex\n          });\n        }\n      } else if (this.onPing) {\n        this.onPing(this.roundTripTime);\n        this.pingTimeout = window.setTimeout(this.ping, PING_INTERVAL_MS);\n      }\n      return;\n\n      case 'room-joined':\n      this.simRunner = SimRunner.deserialize(msg.simRunner);\n      this.fpsTimer = new FPSTimer(\n        msg.fps,\n        this.handleTick.bind(this),\n        () => performance.now(),\n        this.timeSync.fromServerTime(msg.timeOrigin),\n      );\n      if (this.onSim) {\n        this.onSim(this.simRunner.currentState);\n      }\n      return;\n\n      case 'room-left':\n      console.log(\"Client left the room.\");\n      this.ws.close();\n      return;\n\n      case 'sim-command':\n      if (this.simRunner) {\n        this.simRunner.queuedCommands.push(msg.command);\n      } else {\n        console.log(`Received sim command but no sim runner is set!`);\n      }\n      return;\n\n      default:\n      console.log(`Don't know what to do with message type \"${msg.type}\"`);\n      return;\n    }\n  };\n\n  private handleClose = () => {\n    this.onClose && this.onClose();\n    this.shutdown();\n  };\n\n  shutdown() {\n    if (this.pingTimeout !== null) {\n      window.clearTimeout(this.pingTimeout);\n      this.pingTimeout = null;\n    }\n    this.fpsTimer?.stop();\n    this.fpsTimer = null;\n    this.onOpen = undefined;\n    this.onClose = undefined;\n    this.onPing = undefined;\n    this.ws.close();\n  }\n}\n\nexport const Client: React.FC<{\n  room: string,\n  playerIndex: number\n}> = props => {\n  const [connState, setConnState] = useState('connecting');\n  const [ping, setPing] = useState<number|null>(null);\n  const [sim, setSim] = useState<Sim|null>(null);\n  const activeClient = useRef<BrowserClient|null>(null);\n\n  useEffect(() => {\n    const client = new BrowserClient(props.room, props.playerIndex);\n    client.onOpen = () => setConnState('connected');\n    client.onClose = () => {\n      setConnState('disconnected');\n      setSim(null);\n    };\n    client.onPing = ms => setPing(ms);\n    client.onSim = setSim;\n    activeClient.current = client;\n\n    return () => client.shutdown();\n  }, [props.room, props.playerIndex]);\n\n  const movePlayer = useCallback((v: Vec2) => {\n    if (activeClient.current) {\n      activeClient.current.movePlayer(v);\n    }\n  }, []);\n\n  return <div className=\"Sim\">\n    <p>Connection state: {connState}</p>\n    {sim && <>\n      <SimViz sim={sim} />\n      <Vec2Input up=\"w\" down=\"s\" left=\"a\" right=\"d\" onChange={movePlayer} />\n    </>}\n    {ping !== null && <p>Ping: {ping.toFixed(0)} ms</p>}\n  </div>;\n};\n","import React from 'react';\nimport './App.css';\nimport { InputManager } from './InputManager';\nimport Testbed from './Testbed';\nimport { Client } from './Client';\n\nconst App: React.FC<{search?: string}> = props => {\n  const search = new URLSearchParams(props.search || window.location.search);\n  const room = search.get('room');\n  const playerIndex = parseInt(search.get('p') || '0');\n\n  return (\n    <InputManager>\n      <div className=\"App\">\n        {room && !isNaN(playerIndex) ? <Client {...{room, playerIndex}} /> : <Testbed />}\n      </div>\n    </InputManager>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nconst userAgent = window.navigator.userAgent;\n\nif (userAgent.match(/iPad/i) || userAgent.match(/iPhone/i)) {\n  document.documentElement.classList.add('disable-ios-text-selection');\n}\n"],"sourceRoot":""}